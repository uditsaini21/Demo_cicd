name: sf-devops-script-deployment	

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
     - main
     - DEV
     - QA
     
    paths:
     - 'snowflake-scripts/etl-pipeline/etl-scripts/**'
  workflow_dispatch:

jobs:
 deploy-Snowflake-changes-job:
   runs-on: ubuntu-latest
   steps:
       - name: Extract branch name
         shell: bash
         run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
         id: extract_branch  
         # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
       - name: Checkout repository
         uses: actions/checkout@v2
       - name: Use Python 3.8.x
         uses: actions/setup-python@v2.2.1
         with:
           python-version: 3.8.x
       - name: Run schemachange for DEV
         if: ${{ steps.extract_branch.outputs.branch == 'DEV' }}
         env:
           SF_ACCOUNT: ${{ secrets.DEV_SF_ACCOUNT }}
           SF_USERNAME: ${{ secrets.DEV_SF_DATA_ENGG_USERNAME }}
           SF_ROLE: ${{ secrets.DEV_SF_DATA_ENGG_ROLE }}
           SF_WAREHOUSE: ${{ secrets.DEV_SF_DATA_ENGG_WH }}
           SF_DATABASE: ${{ secrets.DEV_SF_DATABASE }}
           SNOWFLAKE_PASSWORD: ${{ secrets.DEV_SF_DATA_ENGG_PASSWORD }}
           BRANCH_NAME_FOR_CONFIG: ${{ steps.extract_branch.outputs.branch }} 
         run: |
           echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
           python --version
           echo "Step 1: Installing schemachange"
           pip install schemachange
           
           echo "Step 2: Running schemachange"
           schemachange --config-folder snowflake-scripts/etl-pipeline/yaml_configs_for_etl_scripts/yaml_for_DEV -f $GITHUB_WORKSPACE/snowflake-scripts/etl-pipeline/etl-scripts/ -a $SF_ACCOUNT -u $SF_USERNAME -r $SF_ROLE -w $SF_WAREHOUSE -d $SF_DATABASE -c $SF_DATABASE.SCHEMACHANGE_DEV.CHANGE_HISTORY --create-change-history-table
       - name: Run schemachange = QA
         if: ${{ steps.extract_branch.outputs.branch == 'QA' }}
         env:
           SF_ACCOUNT: ${{ secrets.QA_SF_ACCOUNT }}
           SF_USERNAME: ${{ secrets.QA_SF_DATA_ENGG_USERNAME }}
           SF_ROLE: ${{ secrets.QA_SF_DATA_ENGG_ROLE }}
           SF_WAREHOUSE: ${{ secrets.QA_SF_DATA_ENGG_WH }}
           SF_DATABASE: ${{ secrets.QA_SF_DATABASE }}
           SNOWFLAKE_PASSWORD: ${{ secrets.QA_SF_DATA_ENGG_PASSWORD }} 
           BRANCH_NAME_FOR_CONFIG: ${{ steps.extract_branch.outputs.branch }}  
         run: |
           echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
           python --version
           echo "Step 1: Installing schemachange"
           pip install schemachange
           
           echo "Step 2: Running schemachange"
           schemachange --config-folder snowflake-scripts/etl-pipeline/yaml_configs_for_etl_scripts/yaml_for_QA -f $GITHUB_WORKSPACE/snowflake-scripts/etl-pipeline/etl-scripts/ -a $SF_ACCOUNT -u $SF_USERNAME -r $SF_ROLE -w $SF_WAREHOUSE -d $SF_DATABASE -c $SF_DATABASE.SCHEMACHANGE_QA.CHANGE_HISTORY --create-change-history-table
       - name: Run schemachange PRD
         if: ${{ steps.extract_branch.outputs.branch == 'main' }}
         env:
           SF_ACCOUNT: ${{ secrets.PRD_SF_ACCOUNT }}
           SF_USERNAME: ${{ secrets.PRD_SF_DATA_ENGG_USERNAME }}
           SF_ROLE: ${{ secrets.PRD_SF_DATA_ENGG_ROLE }}
           SF_WAREHOUSE: ${{ secrets.PRD_SF_WAREHOUSE }}
           SF_DATABASE: ${{ secrets.PRD_SF_DATABASE }}
           SNOWFLAKE_PASSWORD: ${{ secrets.PRD_SF_DATA_ENGG_PASSWORD }}  
           BRANCH_NAME_FOR_CONFIG: ${{ steps.extract_branch.outputs.branch }}        
         run: |
           echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
           python --version
           echo "Step 1: Installing schemachange"
           pip install schemachange
           
           echo "Step 2: Running schemachange"
           schemachange --config-folder snowflake-scripts/etl-pipeline/yaml_configs_for_etl_scripts/yaml_for_PRD -f $GITHUB_WORKSPACE/snowflake-scripts/etl-pipeline/etl-scripts/ -a $SF_ACCOUNT -u $SF_USERNAME -r $SF_ROLE -w $SF_WAREHOUSE -d $SF_DATABASE -c $SF_DATABASE.SCHEMACHANGE_PRD.CHANGE_HISTORY --create-change-history-table
